{"includedArchiveIdentifiers":["Wand"],"interfaceLanguages":{"swift":[{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/wand\/ask\/option\/optional()","title":"func optional() -> Self","type":"method"},{"path":"\/documentation\/wand\/ask\/option\/set(wand:)","title":"func set(wand: Core?)","type":"method"}],"path":"\/documentation\/wand\/ask\/option","title":"Ask.Option","type":"class"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/wand\/ask\/init(once:for:handler:)-8cjmn","title":"init(once: Bool, for: String?, handler: (T) -> Bool)","type":"init"},{"path":"\/documentation\/wand\/ask\/init(once:for:handler:)-8vd0n","title":"convenience init(once: Bool, for: String?, handler: ((T) -> ())?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/wand\/ask\/handler","title":"var handler: (T) -> Bool","type":"property"},{"path":"\/documentation\/wand\/ask\/key","title":"var key: String","type":"property"},{"path":"\/documentation\/wand\/ask\/next","title":"var next: Ask<T>?","type":"property"},{"path":"\/documentation\/wand\/ask\/once","title":"let once: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/wand\/ask\/cancel()","title":"func cancel()","type":"method"},{"path":"\/documentation\/wand\/ask\/dependency(for:on:)","title":"func dependency<U>(for: String?, on: ((U) -> ())?) -> Ask<U>.Option","type":"method"},{"path":"\/documentation\/wand\/ask\/depends(for:while:)","title":"func depends<U>(for: String?, while: (U) -> Bool) -> Ask<U>.Option","type":"method"},{"path":"\/documentation\/wand\/ask\/head(_:)","title":"func head(T) -> Ask<T>?","type":"method"},{"path":"\/documentation\/wand\/ask\/optional()","title":"func optional() -> Ask<T>.Option","type":"method"},{"path":"\/documentation\/wand\/ask\/set(wand:)","title":"func set(wand: Core?)","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/wand\/ask\/all(handler:)","title":"static func all(handler: (Core) -> ()) -> Ask<Core>","type":"method"},{"path":"\/documentation\/wand\/ask\/any(handler:)","title":"static func any(handler: (Any) -> ()) -> Ask<Any>","type":"method"},{"path":"\/documentation\/wand\/ask\/every(_:handler:)","title":"static func every(String?, handler: ((T) -> ())?) -> Self","type":"method"},{"path":"\/documentation\/wand\/ask\/one(_:handler:)","title":"static func one(String?, handler: ((T) -> ())?) -> Self","type":"method"},{"path":"\/documentation\/wand\/ask\/while(_:handler:)","title":"static func `while`(String?, handler: (T) -> Bool) -> Self","type":"method"},{"path":"\/documentation\/wand\/ask\/while(key:handler:)","title":"static func `while`(key: String?, handler: (T, Int) -> Bool) -> Ask<T>","type":"method"}],"path":"\/documentation\/wand\/ask","title":"Ask","type":"class"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/wand\/core\/error\/init(code:reason:function:)","title":"init(code: Int, reason: String, function: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/wand\/core\/error\/code","title":"let code: Int","type":"property"},{"path":"\/documentation\/wand\/core\/error\/reason","title":"let reason: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/wand\/core\/error\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/wand\/core\/error\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/wand\/core\/error","title":"Core.Error","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/wand\/core\/weak\/init(item:)","title":"init(item: Core)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/wand\/core\/weak\/item","title":"var item: Core?","type":"property"}],"path":"\/documentation\/wand\/core\/weak","title":"Core.Weak","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/wand\/core\/init(_:)","title":"convenience init<T>(T)","type":"init"},{"path":"\/documentation\/wand\/core\/init(dictionary:)","title":"convenience init(dictionary: [String : Any])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/wand\/core\/asking","title":"var asking: [String : (last: Any, cleaner: (() -> ())?)]","type":"property"},{"path":"\/documentation\/wand\/core\/context","title":"var context: [String : Any]","type":"property"},{"path":"\/documentation\/wand\/core\/state-swift.property","title":"var state: Core.State","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/wand\/core\/add(_:for:)","title":"func add<T>(T, for: String?) -> T","type":"method"},{"path":"\/documentation\/wand\/core\/addif(exist:for:)","title":"func addIf<T>(exist: T?, for: String?) -> T?","type":"method"},{"path":"\/documentation\/wand\/core\/append(ask:check:)","title":"func append<T>(ask: Ask<T>, check: Bool) -> Bool","type":"method"},{"path":"\/documentation\/wand\/core\/append(handler:)","title":"func append<T>(handler: Ask<T>) -> Core","type":"method"},{"path":"\/documentation\/wand\/core\/close()","title":"func close()","type":"method"},{"path":"\/documentation\/wand\/core\/contains(_:)","title":"func contains(String) -> Bool","type":"method"},{"path":"\/documentation\/wand\/core\/extract(_:)","title":"func extract<T>(String?) -> T?","type":"method"},{"path":"\/documentation\/wand\/core\/get(for:)-2f9ap","title":"func get<T>(for: String?) -> T","type":"method"},{"path":"\/documentation\/wand\/core\/get(for:)-7cznn","title":"func get<T>(for: String?) -> T?","type":"method"},{"path":"\/documentation\/wand\/core\/get(for:)-87yn1","title":"func get<T>(for: String?) -> T","type":"method"},{"path":"\/documentation\/wand\/core\/get(for:or:)","title":"func get<T>(for: String?, or: @autoclosure () -> T) -> T","type":"method"},{"path":"\/documentation\/wand\/core\/handle(_:head:tail:)","title":"func handle<T>(T, head: Ask<T>?, tail: Ask<T>)","type":"method"},{"path":"\/documentation\/wand\/core\/put(_:for:)","title":"func put<T>(T, for: String?) -> T","type":"method"},{"path":"\/documentation\/wand\/core\/putdefault(_:for:)","title":"func putDefault<T>(T, for: String?)","type":"method"},{"path":"\/documentation\/wand\/core\/save(_:key:)","title":"func save<T>(T, key: String?) -> String","type":"method"},{"path":"\/documentation\/wand\/core\/setcleaner(for:cleaner:)","title":"func setCleaner<T>(for: Ask<T>, cleaner: () -> ())","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/wand\/core\/all","title":"static var all: [Int : Core.Weak]","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/wand\/core\/to(_:)","title":"static func to<C>(C?) -> Core","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/wand\/core\/state-swift.enum\/active","title":"case active","type":"case"},{"path":"\/documentation\/wand\/core\/state-swift.enum\/ready","title":"case ready","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/wand\/core\/state-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/wand\/core\/state-swift.enum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/wand\/core\/state-swift.enum","title":"Core.State","type":"enum"},{"title":"Type Subscripts","type":"groupMarker"},{"path":"\/documentation\/wand\/core\/subscript(_:)-7qa9a","title":"static subscript<T>(T?) -> Core?","type":"subscript"},{"path":"\/documentation\/wand\/core\/subscript(_:)-9fcg4","title":"static subscript<T>(T) -> Core?","type":"subscript"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/wand\/core\/init(booleanliteral:)","title":"convenience init(booleanLiteral: Bool)","type":"init"}],"path":"\/documentation\/wand\/core\/expressiblebybooleanliteral-implementations","title":"ExpressibleByBooleanLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/wand\/core\/init(dictionaryliteral:)","title":"convenience init(dictionaryLiteral: (String, Any)...)","type":"init"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/wand\/core\/key","title":"Core.Key","type":"typealias"}],"path":"\/documentation\/wand\/core\/expressiblebydictionaryliteral-implementations","title":"ExpressibleByDictionaryLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/wand\/core\/init(extendedgraphemeclusterliteral:)","title":"convenience init(extendedGraphemeClusterLiteral: String)","type":"init"},{"path":"\/documentation\/wand\/core\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/wand\/core\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/wand\/core\/init(floatliteral:)","title":"convenience init(floatLiteral: Float)","type":"init"}],"path":"\/documentation\/wand\/core\/expressiblebyfloatliteral-implementations","title":"ExpressibleByFloatLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/wand\/core\/init(integerliteral:)","title":"convenience init(integerLiteral: Int)","type":"init"}],"path":"\/documentation\/wand\/core\/expressiblebyintegerliteral-implementations","title":"ExpressibleByIntegerLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/wand\/core\/init(nilliteral:)","title":"convenience init(nilLiteral: ())","type":"init"}],"path":"\/documentation\/wand\/core\/expressiblebynilliteral-implementations","title":"ExpressibleByNilLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/wand\/core\/init(extendedgraphemeclusterliteral:)-dwtt","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"},{"path":"\/documentation\/wand\/core\/init(stringliteral:)","title":"convenience init(stringLiteral: String)","type":"init"}],"path":"\/documentation\/wand\/core\/expressiblebystringliteral-implementations","title":"ExpressibleByStringLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/wand\/core\/iswanded","title":"var isWanded: Core?","type":"property"},{"path":"\/documentation\/wand\/core\/wand","title":"var wand: Core","type":"property"}],"path":"\/documentation\/wand\/core\/wanded-implementations","title":"Wanded Implementations","type":"symbol"}],"path":"\/documentation\/wand\/core","title":"Core","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/wand\/asking\/every","title":"static var every: Ask<Self>","type":"property"},{"path":"\/documentation\/wand\/asking\/one","title":"static var one: Ask<Self>","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/wand\/asking\/ask(with:ask:)","title":"static func ask<C, T>(with: C, ask: Ask<T>) -> Core","type":"method"},{"path":"\/documentation\/wand\/asking\/every(handler:)","title":"static func every(handler: ((Self) -> ())?) -> Ask<Self>","type":"method"},{"path":"\/documentation\/wand\/asking\/one(handler:)","title":"static func one(handler: ((Self) -> ())?) -> Ask<Self>","type":"method"},{"path":"\/documentation\/wand\/asking\/while(handler:)","title":"static func `while`(handler: (Self) -> Bool) -> Ask<Self>","type":"method"}],"path":"\/documentation\/wand\/asking","title":"Asking","type":"protocol"},{"path":"\/documentation\/wand\/askingnil","title":"AskingNil","type":"protocol"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/wand\/obtainable\/obtain(by:)","title":"static func obtain(by: Core?) -> Self","type":"method"}],"path":"\/documentation\/wand\/obtainable","title":"Obtainable","type":"protocol"},{"children":[{"title":"Operators","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/wand\/ubiquitous\/_(_:)-9c8zx","title":"static func | (Self) -> Self","type":"op"}],"title":"Ubiquitous Implementations","type":"groupMarker"}],"path":"\/documentation\/wand\/ubiquitous\/_(_:)","title":"static func | (Self) -> Self","type":"op"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/wand\/ubiquitous\/access()","title":"static func access() -> Self","type":"method"}],"path":"\/documentation\/wand\/ubiquitous","title":"Ubiquitous","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/wand\/wanded\/iswanded-3zn2n","title":"var isWanded: Core?","type":"property"}],"title":"Wanded Implementations","type":"groupMarker"}],"path":"\/documentation\/wand\/wanded\/iswanded","title":"var isWanded: Core?","type":"property"},{"children":[{"children":[{"path":"\/documentation\/wand\/wanded\/wand-s989","title":"var wand: Core","type":"property"}],"title":"Wanded Implementations","type":"groupMarker"}],"path":"\/documentation\/wand\/wanded\/wand","title":"var wand: Core","type":"property"}],"path":"\/documentation\/wand\/wanded","title":"Wanded","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/wand\/memory\/address(for:)-29dv7","title":"static func address<T>(for: T) -> Int","type":"method"},{"path":"\/documentation\/wand\/memory\/address(for:)-44a6v","title":"static func address<T>(for: T) -> Int","type":"method"}],"path":"\/documentation\/wand\/memory","title":"Memory","type":"struct"},{"title":"Functions","type":"groupMarker"},{"path":"\/documentation\/wand\/log(_:)","title":"func log(String)","type":"func"},{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/wand\/_(_:)-13r4h","title":"func | (String) -> Int?","type":"op"},{"path":"\/documentation\/wand\/_(_:)-18ln3","title":"func | <T>(T.Type) -> T","type":"op"},{"path":"\/documentation\/wand\/_(_:)-1bavu","title":"func | <T>((T) -> ()) -> Core","type":"op"},{"path":"\/documentation\/wand\/_(_:)-1mfbc","title":"func | ((any Wanded)?) -> Core?","type":"op"},{"path":"\/documentation\/wand\/_(_:)-1tvgk","title":"func | <T>(Bool) -> T","type":"op"},{"path":"\/documentation\/wand\/_(_:)-1u2bc","title":"func | <T>(T) -> String","type":"op"},{"path":"\/documentation\/wand\/_(_:)-1v5ni","title":"func | (CGFloat) -> Float","type":"op"},{"path":"\/documentation\/wand\/_(_:)-202y7","title":"func | (Double) -> Float","type":"op"},{"path":"\/documentation\/wand\/_(_:)-2go0i","title":"func | (String) -> Int","type":"op"},{"path":"\/documentation\/wand\/_(_:)-2hxn9","title":"func | (any BinaryInteger) -> Double","type":"op"},{"path":"\/documentation\/wand\/_(_:)-3s8xb","title":"func | <T>(Ask<T>) -> Core","type":"op"},{"path":"\/documentation\/wand\/_(_:)-3sck7","title":"func | <C, T>(C) -> T","type":"op"},{"path":"\/documentation\/wand\/_(_:)-40hxn","title":"func | (Character) -> UInt32","type":"op"},{"path":"\/documentation\/wand\/_(_:)-4dw2e","title":"func | <T>(T.Type) -> T","type":"op"},{"path":"\/documentation\/wand\/_(_:)-4i3dl","title":"func | <C, T>(C) -> T","type":"op"},{"path":"\/documentation\/wand\/_(_:)-4q8rw","title":"func | (any BinaryFloatingPoint) -> Int","type":"op"},{"path":"\/documentation\/wand\/_(_:)-4zli6","title":"func | (String?) -> Data?","type":"op"},{"path":"\/documentation\/wand\/_(_:)-51y1n","title":"func | (any BinaryInteger) -> CGFloat","type":"op"},{"path":"\/documentation\/wand\/_(_:)-569lk","title":"func | <T>(Core?) -> T","type":"op"},{"path":"\/documentation\/wand\/_(_:)-5ldz","title":"func | <T>(Core?) -> T","type":"op"},{"path":"\/documentation\/wand\/_(_:)-64bw1","title":"func | (Int) -> Character","type":"op"},{"path":"\/documentation\/wand\/_(_:)-67rzz","title":"func | (Data) -> String?","type":"op"},{"path":"\/documentation\/wand\/_(_:)-6zb77","title":"func | <T>(T?) -> T","type":"op"},{"path":"\/documentation\/wand\/_(_:)-813vv","title":"func | (String?) -> Double?","type":"op"},{"path":"\/documentation\/wand\/_(_:)-8zdky","title":"func | <T>(T?) -> T","type":"op"},{"path":"\/documentation\/wand\/_(_:)-97g91","title":"func | (Data) -> String","type":"op"},{"path":"\/documentation\/wand\/_(_:)-xo1o","title":"func | (String?) -> Data","type":"op"},{"path":"\/documentation\/wand\/_(_:_:)-18wl5","title":"func | <C, T>(C, Ask<T>) -> Core","type":"op"},{"path":"\/documentation\/wand\/_(_:_:)-1cpd8","title":"func | (String?, String.Encoding?) -> Data","type":"op"},{"path":"\/documentation\/wand\/_(_:_:)-1dib3","title":"func | (Core, ((any Error)?) -> ()) -> Core","type":"op"},{"path":"\/documentation\/wand\/_(_:_:)-328ac","title":"func | <T, U>(Ask<T>, Ask<U>) -> Core","type":"op"},{"path":"\/documentation\/wand\/_(_:_:)-32g29","title":"func | (String?, String.Encoding?) -> Data?","type":"op"},{"path":"\/documentation\/wand\/_(_:_:)-3t0uk","title":"func | (Core, Ask<Core>) -> Core","type":"op"},{"path":"\/documentation\/wand\/_(_:_:)-4lknp","title":"func | (Data, String.Encoding?) -> String?","type":"op"},{"path":"\/documentation\/wand\/_(_:_:)-4tlmq","title":"func | (Data, String.Encoding) -> String","type":"op"},{"path":"\/documentation\/wand\/_(_:_:)-5o35u","title":"func | (Core, Ask<(any Error)?>) -> Core","type":"op"},{"path":"\/documentation\/wand\/_(_:_:)-5ox9r","title":"func | (Core, (any Error) -> ()) -> Core","type":"op"},{"path":"\/documentation\/wand\/_(_:_:)-72ind","title":"func | (Core, Ask<Any>) -> Core","type":"op"},{"path":"\/documentation\/wand\/_(_:_:)-7kg27","title":"func | <C, T>(C, (T) -> ()) -> Core","type":"op"},{"path":"\/documentation\/wand\/_(_:_:)-7xwgb","title":"func | (Core, Ask<any Error>) -> Core","type":"op"},{"title":"Extended Modules","type":"groupMarker"},{"children":[{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/wand\/swift\/string\/all","title":"static let all: String","type":"property"},{"path":"\/documentation\/wand\/swift\/string\/any","title":"static let any: String","type":"property"}],"path":"\/documentation\/wand\/swift\/string","title":"String","type":"extension"},{"title":"Extended Enumerations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/wand\/swift\/optional\/iswanded","title":"var isWanded: Core?","type":"property"},{"path":"\/documentation\/wand\/swift\/optional\/wand","title":"var wand: Core","type":"property"}],"path":"\/documentation\/wand\/swift\/optional","title":"Optional","type":"extension"}],"path":"\/documentation\/wand\/swift","title":"Swift","type":"extension"}],"path":"\/documentation\/wand","title":"Wand","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":2}}